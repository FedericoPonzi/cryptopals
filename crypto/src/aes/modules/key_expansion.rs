use crate::aes::modules::sbox;

const RC_VALUES: &[u8; 11] = &[
    0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36,
];

/// The AES key expansion algorithm takes as input a four-word (16-byte) key and produces a linear
/// array of 44 words (176 bytes)
/// For AES-128, there is 1 AddRoundKey at the beginning, 9 rounds (with 9 AddRounKey) and 1 final
/// AddRoundKey in the final round.
pub fn key_expansion(key: &[u8; 16]) -> [[u8; 16]; 11] {
    let mut ret = [[0u8; 16]; 11];

    // number of round keys needed:
    // 11 round keys for AES-128, 13 keys for AES-192, and 15 keys for AES-256
    const ROUNDS: usize = 10;

    ret[0] = key.clone();

    for i in 1..=ROUNDS {
        let mut last_column: [u8; 4] = [0u8; 4];
        last_column.copy_from_slice(&ret[i - 1][12..16]);
        let rotated = rot_word(&last_column);
        let sboxed = sub_word(&rotated);
        let rcon = [RC_VALUES[i], 0x0, 0x0, 0x0];
        let rcon_xored = xor(&sboxed, &rcon);
        let mut first_column_previous_round = [0u8; 4];
        first_column_previous_round.copy_from_slice(&ret[i - 1][0..4]);
        let first_column = xor(&rcon_xored, &first_column_previous_round);
        ret[i] = [0u8; 16];
        ret[i][0..4].copy_from_slice(&first_column);
        let mut previous_round_column = first_column;
        for word in 1..=3 {
            let word_start = 4 * word;
            let word_end = word_start + 4;
            let mut current_column: [u8; 4] = [0u8; 4];
            current_column.copy_from_slice(&ret[i - 1][word_start..word_end]);
            let new_column = xor(&current_column, &previous_round_column);
            ret[i][word_start..word_end].copy_from_slice(&new_column);
            previous_round_column = new_column;
        }
    }
    ret
}

fn xor(sboxed: &[u8; 4], rcon: &[u8; 4]) -> [u8; 4] {
    let mut ret = [0u8; 4];
    for i in 0..ret.len() {
        ret[i] = sboxed[i] ^ rcon[i];
    }
    ret
}

// Rotate left
fn rot_word(w: &[u8; 4]) -> [u8; 4] {
    [w[1], w[2], w[3], w[0]]
}

// Apply s-box to each byte
fn sub_word(w: &[u8]) -> [u8; 4] {
    let mut ret = [0u8; 4];
    for (pos, x) in w.iter().cloned().enumerate().take(4) {
        ret[pos] = sbox::single_sub(x);
    }
    ret
}

#[cfg(test)]
mod test {
    use super::key_expansion;

    #[test]
    fn test_key_expansion() {
        let input: &[u8; 16] = b"SOME 128 BIT KEY";
        let expanded = key_expansion(input);
        let expected = [
            0xe1, 0x21, 0x86, 0xf2, 0xc1, 0x10, 0xb4, 0xca, 0xe1, 0x52, 0xfd, 0x9e, 0xc1, 0x19,
            0xb8, 0xc7,
        ];
        assert_eq!(expanded[1], expected);

        let input: &[u8; 16] = b"Thats my Kung Fu";
        let expanded = key_expansion(input);
        let expected = [
            0xe2, 0x32, 0xfc, 0xf1, 0x91, 0x12, 0x91, 0x88, 0xb1, 0x59, 0xe4, 0xe6, 0xd6, 0x79,
            0xa2, 0x93,
        ];
        assert_eq!(expanded[1], expected);

        let input: &[u8; 16] = &[
            196, 153, 60, 65, 49, 60, 15, 73, 199, 220, 63, 80, 220, 105, 229, 158,
        ];
        let expanded = key_expansion(input);
        let expected = [
            [
                0xc4, 0x99, 0x3c, 0x41, 0x31, 0x3c, 0x0f, 0x49, 0xc7, 0xdc, 0x3f, 0x50, 0xdc, 0x69,
                0xe5, 0x9e,
            ],
            [
                0x3c, 0x40, 0x37, 0xc7, 0x0d, 0x7c, 0x38, 0x8e, 0xca, 0xa0, 0x07, 0xde, 0x16, 0xc9,
                0xe2, 0x40,
            ],
            [
                0xe3, 0xd8, 0x3e, 0x80, 0xee, 0xa4, 0x06, 0x0e, 0x24, 0x04, 0x01, 0xd0, 0x32, 0xcd,
                0xe3, 0x90,
            ],
            [
                0x5a, 0xc9, 0x5e, 0xa3, 0xb4, 0x6d, 0x58, 0xad, 0x90, 0x69, 0x59, 0x7d, 0xa2, 0xa4,
                0xba, 0xed,
            ],
            [
                0x1b, 0x3d, 0x0b, 0x99, 0xaf, 0x50, 0x53, 0x34, 0x3f, 0x39, 0x0a, 0x49, 0x9d, 0x9d,
                0xb0, 0xa4,
            ],
            [
                0x55, 0xda, 0x42, 0xc7, 0xfa, 0x8a, 0x11, 0xf3, 0xc5, 0xb3, 0x1b, 0xba, 0x58, 0x2e,
                0xab, 0x1e,
            ],
            [
                0x44, 0xb8, 0x30, 0xad, 0xbe, 0x32, 0x21, 0x5e, 0x7b, 0x81, 0x3a, 0xe4, 0x23, 0xaf,
                0x91, 0xfa,
            ],
            [
                0x7d, 0x39, 0x1d, 0x8b, 0xc3, 0x0b, 0x3c, 0xd5, 0xb8, 0x8a, 0x06, 0x31, 0x9b, 0x25,
                0x97, 0xcb,
            ],
            [
                0xc2, 0xb1, 0x02, 0x9f, 0x01, 0xba, 0x3e, 0x4a, 0xb9, 0x30, 0x38, 0x7b, 0x22, 0x15,
                0xaf, 0xb0,
            ],
            [
                0x80, 0xc8, 0xe5, 0x0c, 0x81, 0x72, 0xdb, 0x46, 0x38, 0x42, 0xe3, 0x3d, 0x1a, 0x57,
                0x4c, 0x8d,
            ],
            [
                0xed, 0xe1, 0xb8, 0xae, 0x6c, 0x93, 0x63, 0xe8, 0x54, 0xd1, 0x80, 0xd5, 0x4e, 0x86,
                0xcc, 0x58,
            ],
        ];
        assert_eq!(expanded, expected);
    }
    #[test]
    fn test_full() {
        let expected = [
            [
                0x88, 0x65, 0x20, 0xa9, 0xb8, 0x86, 0xc6, 0xfe, 0x41, 0x18, 0x40, 0x50, 0x42, 0x2f,
                0x7c, 0x1a,
            ],
            [
                0x9c, 0x75, 0x82, 0x85, 0x24, 0xf3, 0x44, 0x7b, 0x65, 0xeb, 0x04, 0x2b, 0x27, 0xc4,
                0x78, 0x31,
            ],
            [
                0x82, 0xc9, 0x45, 0x49, 0xa6, 0x3a, 0x01, 0x32, 0xc3, 0xd1, 0x05, 0x19, 0xe4, 0x15,
                0x7d, 0x28,
            ],
            [
                0xdf, 0x36, 0x71, 0x20, 0x79, 0x0c, 0x70, 0x12, 0xba, 0xdd, 0x75, 0x0b, 0x5e, 0xc8,
                0x08, 0x23,
            ],
            [
                0x3f, 0x06, 0x57, 0x78, 0x46, 0x0a, 0x27, 0x6a, 0xfc, 0xd7, 0x52, 0x61, 0xa2, 0x1f,
                0x5a, 0x42,
            ],
            [
                0xef, 0xb8, 0x7b, 0x42, 0xa9, 0xb2, 0x5c, 0x28, 0x55, 0x65, 0x0e, 0x49, 0xf7, 0x7a,
                0x54, 0x0b,
            ],
            [
                0x15, 0x98, 0x50, 0x2a, 0xbc, 0x2a, 0x0c, 0x02, 0xe9, 0x4f, 0x02, 0x4b, 0x1e, 0x35,
                0x56, 0x40,
            ],
            [
                0xc3, 0x29, 0x59, 0x58, 0x7f, 0x03, 0x55, 0x5a, 0x96, 0x4c, 0x57, 0x11, 0x88, 0x79,
                0x01, 0x51,
            ],
            [
                0xf5, 0x55, 0x88, 0x9c, 0x8a, 0x56, 0xdd, 0xc6, 0x1c, 0x1a, 0x8a, 0xd7, 0x94, 0x63,
                0x8b, 0x86,
            ],
            [
                0x15, 0x68, 0xcc, 0xbe, 0x9f, 0x3e, 0x11, 0x78, 0x83, 0x24, 0x9b, 0xaf, 0x17, 0x47,
                0x10, 0x29,
            ],
            [
                0x83, 0xa2, 0x69, 0x4e, 0x1c, 0x9c, 0x78, 0x36, 0x9f, 0xb8, 0xe3, 0x99, 0x88, 0xff,
                0xf3, 0xb0,
            ],
        ];
        let input: &[u8; 16] = &[
            136, 101, 32, 169, 184, 134, 198, 254, 65, 24, 64, 80, 66, 47, 124, 26,
        ];
        let expanded = key_expansion(input);

        assert_eq!(expanded, expected);
    }
}
